import { Injectable } from "@angular/core";
import { ChromeLocalStorageService } from "@chat-booth/core/services";
import { Apollo, MutationResult } from "apollo-angular";
import { Observable, map } from "rxjs";
import { Booth } from "../models";
import { GET_USER_BOOTHS, JOIN_BOOTH } from "./gql-actions.gql";
import { AuthCredentials } from "@chat-booth/auth/models";

@Injectable()
export class BoothsService {
  constructor(
    private readonly apollo: Apollo,
    private readonly storage: ChromeLocalStorageService
  ) {}
  
  public joinABooth(credentials: AuthCredentials) {
    return this.apollo.mutate<{ joinBooth: Partial<Booth> }>({
      mutation: JOIN_BOOTH,
      context: {
        headers: {
          Authorization: `Bearer ${credentials.idToken}`
        }
      },
      variables: {
        url: "https://github.com/orelnatan?tab=repositories",
        userId: credentials.uid
      },
    }).pipe(
      map((response: MutationResult<{ joinBooth: Partial<Booth> }>): Partial<Booth> => {
        console.log("ggggggg ", response);
        return response.data?.joinBooth;
      })
    );
  }

  public getUserBooths(credentials: AuthCredentials) {
    return this.apollo.query<{ getUserBooths: Partial<Booth> }>({
      query: GET_USER_BOOTHS,
      context: {
        headers: {
          Authorization: `Bearer ${credentials.idToken}`
        }
      },
      variables: {
        id: credentials.uid
      },
    }).pipe(
      map((response: MutationResult<{ getUserBooths: Partial<Booth> }>): Partial<Booth> => {
        console.log("xxxxxx ", response);
        return response.data?.getUserBooths;
      })
    );
  }

}



export class RootLayoutComponent {
  @ViewChild('layoutContent', { read: ElementRef }) layoutContent: ElementRef<HTMLDivElement>;

  @Input({ transform: booleanAttribute }) forRoot: boolean;

  public scrollToBottom(): void {
    this.layoutContent.nativeElement.scrollTop = this.layoutContent.nativeElement.scrollHeight;
  }
}


detect when scrolling to..

onScroll(event: Event): void {
  const target = event.target as HTMLElement;

  // Detect scrolling to the top
  if (target.scrollTop === 0) {
    console.log('User scrolled to the top!');
  }

  // Detect scrolling to the bottom
  if (target.scrollTop + target.clientHeight >= target.scrollHeight) {
    console.log('User scrolled to the bottom!');
  }

  // Detect scrolling to the right edge
  if (target.scrollLeft + target.clientWidth >= target.scrollWidth) {
    console.log('User scrolled to the right edge!');
  }

  // Detect scrolling to the left edge
  if (target.scrollLeft === 0) {
    console.log('User scrolled to the left edge!');
  }
}

.................................................................................

public scrollToTop(): void {
  this.pageLayoutBody.nativeElement.scrollTop = 0;
}

public scrollToBottom(): void {
  this.pageLayoutBody.nativeElement.scrollTop = this.pageLayoutBody.nativeElement.scrollHeight;
}

public scrollByPercentage(percentage: number): void {
  const element: HTMLDivElement = this.pageLayoutBody.nativeElement;
  const maxScrollTop: number = element.scrollHeight - element.clientHeight;

  // Clamp the percentage between 0 and 100 to avoid invalid values
  const clampedPercentage: number = Math.max(0, Math.min(percentage, 100));

  // Calculate the scrollTop position based on the percentage
  element.scrollTop = (clampedPercentage / 100) * maxScrollTop;
}